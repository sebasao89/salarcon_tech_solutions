---
import '../styles/global.css' 
import Navbar from '../components/navbar.astro';
import Copyright from '../components/copyright.astro';

export interface Props {
	title: string;
	description?: string;
}

const { title, description = "Sitio web de Salarcon Tech Solutions" } = Astro.props;
const canonicalUrl = Astro.url.href;
const siteName = "Salarcon Tech Solutions";
const ogImage = "/logo/img-home.png";
---

<!DOCTYPE html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/png" href="/logo/icon_Favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="canonical" href={canonicalUrl} />
		<meta name="robots" content="index,follow" />
		<meta name="theme-color" content="#111418" />

		<meta property="og:type" content="website" />
		<meta property="og:site_name" content={siteName} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:url" content={canonicalUrl} />
		<meta property="og:image" content={ogImage} />
		<meta property="og:locale" content="es_CO" />

		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={ogImage} />
	</head>
	<body>
		<header>
			<Navbar />
		</header>
		
		<main class="pt-5 md:pt-10">
			<slot />
		</main>
		
	<div class="animate-in anim-up delay-375"><Copyright /></div>

	<script type="application/ld+json">
	{JSON.stringify({
		"@context": "https://schema.org",
		"@type": "Organization",
		"name": siteName,
		"url": canonicalUrl,
		"logo": "/logo/logo-h-transp.png"
	})}
	</script>

	<script>
	  // IntersectionObserver para revelar elementos al hacer scroll
	  const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
	  const revealEls = document.querySelectorAll('[data-reveal]');

	  if (prefersReduced) {
	    // Si el usuario prefiere menos movimiento, mostrar todo sin animaciones
	    revealEls.forEach((el) => el.classList.add('revealed'));
	  } else if ('IntersectionObserver' in window) {
	    const observer = new IntersectionObserver((entries) => {
	      entries.forEach((entry) => {
	        const el = entry.target;
	        if (entry.isIntersecting) {
	          el.classList.add('revealed');
	          // una vez revelado, dejar de observar para evitar reprocesos
	          observer.unobserve(el);
	        }
	      });
	    }, { root: null, rootMargin: '0px 0px -10% 0px', threshold: 0.1 });

	    revealEls.forEach((el) => observer.observe(el));
	  } else {
	    // Fallback si IntersectionObserver no estÃ¡ disponible
	    revealEls.forEach((el) => el.classList.add('revealed'));
	  }
	</script>
	</body>
</html>